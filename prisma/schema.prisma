generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 유저 테이블
model User {
  user_id    Int      @id @default(autoincrement())
  email      String   @db.VarChar(50)
  password   String?  @db.Text
  provider   PROVIDER
  sns_id     String?  @db.VarChar(100)
  created_at DateTime @default(now())
  role       USERROLE @default(USER)

  learning_lists LearningList[]
  payments       Payment[]

  @@unique(fields: [provider, email], name: "provider_email")
}

// 간편 로그인
enum PROVIDER {
  LOCAL
  NAVER
  KAKAO
}

// 유저 권한 종류 ADMIN-root사용자 MANAGER-iam사용자 USER-일반유저
enum USERROLE {
  ADMIN
  MANAGER
  USER
}

// 수업정보
model Lecture {
  lecture_id Int      @id @default(autoincrement())
  thumbnail  String   @db.Text
  title      String   @db.VarChar(50)
  created_at DateTime @default(now())

  learning_lists  LearningList[]
  payment_lecture PaymentLecture[]
  LectureInfo     LectureInfo?
  curriculums     Curriculum[]
}

// 강의 상세정보
model LectureInfo {
  lecture_info_id Int    @id @default(autoincrement())
  description     String @db.Text
  lecture_id      Int    @unique

  lecture Lecture @relation(fields: [lecture_id], references: [lecture_id])
}

// 강의 커리큘럼
model Curriculum {
  curriculum_id Int    @id @default(autoincrement())
  lecture_id    Int    @unique
  thumbnail     String @db.Text
  title         String @db.VarChar(50)
  description   String @db.VarChar(200)
  video         String @db.Text

  lecture Lecture @relation(fields: [lecture_id], references: [lecture_id])
}

// 유저가 듣고있는 목록
model LearningList {
  user_id    Int
  lecture_id Int
  created_at DateTime @default(now())

  user    User    @relation(fields: [user_id], references: [user_id])
  lecture Lecture @relation(fields: [lecture_id], references: [lecture_id])

  @@id(fields: [user_id, lecture_id], name: "user_id_lecture_id")
}

// 결제내역
model Payment {
  payment_id Int      @id @default(autoincrement())
  user_id    Int
  created_at DateTime @default(now())

  user             User             @relation(fields: [user_id], references: [user_id])
  payment_info     PaymentInfo?
  payment_lectures PaymentLecture[]
}

// 결제내역 상세 결제정보
model PaymentInfo {
  payment_info_id Int    @id @default(autoincrement())
  payment_id      Int    @unique
  payment_key     String @db.VarChar(100)
  order_id        String @db.VarChar(100)
  status          String @db.VarChar(15)
  total_amount    Int
  supplied_amount Int

  payment Payment @relation(fields: [payment_id], references: [payment_id])
}

// 결제내역 상세 강의정보
model PaymentLecture {
  payment_product_id Int @id @default(autoincrement())
  payment_id         Int
  lecture_id         Int

  payment Payment @relation(fields: [payment_id], references: [payment_id])
  lecture Lecture @relation(fields: [lecture_id], references: [lecture_id])
}
